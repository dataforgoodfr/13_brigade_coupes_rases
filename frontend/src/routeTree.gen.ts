/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AdministrationRouteImport } from './routes/administration'
import { Route as ClearCutsRouteImport } from './routes/_clear-cuts'
import { Route as AuthRouteImport } from './routes/_auth'

const IndexLazyRouteImport = createFileRoute('/')()
const ClearCutsClearCutsIndexLazyRouteImport = createFileRoute(
  '/_clear-cuts/clear-cuts/',
)()
const ClearCutsClearCutsClearCutIdLazyRouteImport = createFileRoute(
  '/_clear-cuts/clear-cuts/$clearCutId',
)()

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AdministrationRoute = AdministrationRouteImport.update({
  id: '/administration',
  path: '/administration',
  getParentRoute: () => rootRouteImport,
} as any)
const ClearCutsRoute = ClearCutsRouteImport.update({
  id: '/_clear-cuts',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexLazyRoute = IndexLazyRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))
const ClearCutsClearCutsIndexLazyRoute =
  ClearCutsClearCutsIndexLazyRouteImport.update({
    id: '/clear-cuts/',
    path: '/clear-cuts/',
    getParentRoute: () => ClearCutsRoute,
  } as any).lazy(() =>
    import('./routes/_clear-cuts.clear-cuts.index.lazy').then((d) => d.Route),
  )
const ClearCutsClearCutsClearCutIdLazyRoute =
  ClearCutsClearCutsClearCutIdLazyRouteImport.update({
    id: '/clear-cuts/$clearCutId',
    path: '/clear-cuts/$clearCutId',
    getParentRoute: () => ClearCutsRoute,
  } as any).lazy(() =>
    import('./routes/_clear-cuts.clear-cuts.$clearCutId.lazy').then(
      (d) => d.Route,
    ),
  )

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/administration': typeof AdministrationRoute
  '/login': typeof LoginRoute
  '/clear-cuts/$clearCutId': typeof ClearCutsClearCutsClearCutIdLazyRoute
  '/clear-cuts': typeof ClearCutsClearCutsIndexLazyRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/administration': typeof AdministrationRoute
  '/login': typeof LoginRoute
  '/clear-cuts/$clearCutId': typeof ClearCutsClearCutsClearCutIdLazyRoute
  '/clear-cuts': typeof ClearCutsClearCutsIndexLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexLazyRoute
  '/_auth': typeof AuthRoute
  '/_clear-cuts': typeof ClearCutsRouteWithChildren
  '/administration': typeof AdministrationRoute
  '/login': typeof LoginRoute
  '/_clear-cuts/clear-cuts/$clearCutId': typeof ClearCutsClearCutsClearCutIdLazyRoute
  '/_clear-cuts/clear-cuts/': typeof ClearCutsClearCutsIndexLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/administration'
    | '/login'
    | '/clear-cuts/$clearCutId'
    | '/clear-cuts'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/administration'
    | '/login'
    | '/clear-cuts/$clearCutId'
    | '/clear-cuts'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/_clear-cuts'
    | '/administration'
    | '/login'
    | '/_clear-cuts/clear-cuts/$clearCutId'
    | '/_clear-cuts/clear-cuts/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AuthRoute: typeof AuthRoute
  ClearCutsRoute: typeof ClearCutsRouteWithChildren
  AdministrationRoute: typeof AdministrationRoute
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/administration': {
      id: '/administration'
      path: '/administration'
      fullPath: '/administration'
      preLoaderRoute: typeof AdministrationRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_clear-cuts': {
      id: '/_clear-cuts'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ClearCutsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_clear-cuts/clear-cuts/': {
      id: '/_clear-cuts/clear-cuts/'
      path: '/clear-cuts'
      fullPath: '/clear-cuts'
      preLoaderRoute: typeof ClearCutsClearCutsIndexLazyRouteImport
      parentRoute: typeof ClearCutsRoute
    }
    '/_clear-cuts/clear-cuts/$clearCutId': {
      id: '/_clear-cuts/clear-cuts/$clearCutId'
      path: '/clear-cuts/$clearCutId'
      fullPath: '/clear-cuts/$clearCutId'
      preLoaderRoute: typeof ClearCutsClearCutsClearCutIdLazyRouteImport
      parentRoute: typeof ClearCutsRoute
    }
  }
}

interface ClearCutsRouteChildren {
  ClearCutsClearCutsClearCutIdLazyRoute: typeof ClearCutsClearCutsClearCutIdLazyRoute
  ClearCutsClearCutsIndexLazyRoute: typeof ClearCutsClearCutsIndexLazyRoute
}

const ClearCutsRouteChildren: ClearCutsRouteChildren = {
  ClearCutsClearCutsClearCutIdLazyRoute: ClearCutsClearCutsClearCutIdLazyRoute,
  ClearCutsClearCutsIndexLazyRoute: ClearCutsClearCutsIndexLazyRoute,
}

const ClearCutsRouteWithChildren = ClearCutsRoute._addFileChildren(
  ClearCutsRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AuthRoute: AuthRoute,
  ClearCutsRoute: ClearCutsRouteWithChildren,
  AdministrationRoute: AdministrationRoute,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
